CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(ABench)

MESSAGE("Generating Makefile for ABench project")

INCLUDE(FindPkgConfig)

# Pre-define Release build
IF(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
    SET(CMAKE_BUILD_TYPE Release)
ENDIF(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")

# Pre-define 64-bit build platform
IF(NOT DEFINED BUILD_PLATFORM)
    EXECUTE_PROCESS(COMMAND uname -m
                    OUTPUT_VARIABLE BUILD_PLATFORM OUTPUT_STRIP_TRAILING_WHITESPACE)
ENDIF(NOT DEFINED BUILD_PLATFORM)

# Set required variables
SET(CMAKE_CXX_FLAGS       "${CMAKE_CXX_FLAGS} -O2 -std=c++1y")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG -O0 -g -std=c++1y")

# Set directory macros
SET(ABENCH_ROOT_DIRECTORY ${CMAKE_SOURCE_DIR})
SET(ABENCH_OUTPUT_DIRECTORY ${ABENCH_ROOT_DIRECTORY}/Bin/${BUILD_PLATFORM}/${CMAKE_BUILD_TYPE})
SET(ABENCH_DIRECTORY ${ABENCH_ROOT_DIRECTORY}/ABench)
SET(ABENCHTEST_DIRECTORY ${ABENCH_ROOT_DIRECTORY}/ABenchTest)
SET(ABENCH_DEPS_DIRECTORY ${ABENCH_ROOT_DIRECTORY}/Deps)

# Enable all warnings and make them errors
ADD_DEFINITIONS("-Wall -Wpedantic -Wextra -Wno-sign-compare -Werror")

# Warnings exceptions
ADD_DEFINITIONS("-Wno-multichar")
ADD_DEFINITIONS("-Wno-switch")
ADD_DEFINITIONS("-Wno-unused-result")
ADD_DEFINITIONS("-Wno-unused-private-field")
ADD_DEFINITIONS("-Wno-four-char-constants")

# Building outputs
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ABENCH_OUTPUT_DIRECTORY})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${ABENCH_OUTPUT_DIRECTORY})

MESSAGE("Build type is ${CMAKE_BUILD_TYPE}")
MESSAGE("Output path is ${ABENCH_OUTPUT_DIRECTORY}")
MESSAGE("Platform is ${BUILD_PLATFORM}")

# Add all projects
ADD_SUBDIRECTORY("ABench")
ADD_SUBDIRECTORY("gtest")

FILE(MAKE_DIRECTORY ${ABENCH_OUTPUT_DIRECTORY})
